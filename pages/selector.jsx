import React, { useEffect, useLayoutEffect, useState } from 'react'
import Content from '../components/Content'
import FileTree from '../components/FileTree'
import TimeSelector from '../components/TimeSelector'

import Link from 'next/link'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowRotateLeft, faFileUpload } from '@fortawesome/free-solid-svg-icons'
import VideoSelector from '../components/VideoSelector'
import Head from 'next/head'
import { useCookies } from 'react-cookie'

const ContentSelector = (props) => {
  const [currentContent, setCurrentContent] = useState(["", "documents"])
  const [fileTypes, setFileTypes] = useState({ "ðŸŽ¥": ["video/*", "/video"], "ðŸ–¼": ["image/*", "/image"], "PDF": [".pdf", "/document"] })
  const [topic, setTopic] = useState("")
  const [snippetTitle, setSnippetTitle] = useState("")
  const [startTime, setStartTime] = useState("00:00:00")
  const [endTime, setEndTime] = useState("00:00:00")
  const [currentUpdater, setCurrentUpdater] = useState(t => setEndTime)
  const [media, setMedia] = useState(props.media)
  const [userMedia, setUserMedia] = useState({...props.user_media})
  const [cookies, setCookie, removeCookie] = useCookies(["username"]);
  useLayoutEffect(() =>{
    setUserMedia({...props.user_media})
    
  }, [props.user_media])
  
  return (
    <main className='selector'>
      <Head>
        <title>A Personal Selector</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

      </Head>

      <div className='upload-menu'>
        <Link as="viewer" href="/viewer"><div className='input-button link' ><FontAwesomeIcon icon={faArrowRotateLeft} /></div></Link>
        {Object.keys(fileTypes).map(s => <label className='input-button' key={s}><input type="file" onChange={async e => {
          let formData = new FormData()
          for (let i = 0; i < e.target.files.length; i++) {
            const f = e.target.files.item(i);
            formData.append(f.name, f)
          }
          await fetch(props.host + fileTypes[s][1], {
            method: "POST",
            body: formData
          })
        }} accept={fileTypes[s][0]} /><span>{s}</span></label>)}
        <div className="separator"></div>
        <VideoSelector host={props.host} />
      </div>


      <div>
        <FileTree host={props.host} select={true} setCurrentContent={setCurrentContent} media={media} onTriggerAddFileToPersonalList={
          (fileName, contentType, topic) => {
              const filename=(topic?topic+"/":"")+fileName
              if(typeof props.user_media[contentType]=="object")props.user_media[contentType]=Object.values(props.user_media[contentType])
              if(!props.user_media[contentType].includes(filename)) props.user_media[contentType]=[...props.user_media[contentType],filename]
              else props.user_media[contentType]=props.user_media[contentType].filter(v=>v!=filename)
              setUserMedia({...props.user_media})
              fetch(props.host + "/videos/edit", {
                method: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  username: cookies.username,
                  json:props.user_media["Videos"]
                })
              })
              fetch(props.host + "/images/edit", {
                method: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  username: cookies.username,
                  json:props.user_media["Images"]
                })
              })
              fetch(props.host + "/documents/edit", {
                method: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  username: cookies.username,
                  json:props.user_media["Documents"]
                })
              })
          }} />
        <Content style={{
          gridColumn: "1/4",
          //gridRow:(currentContent[1] != "video")?"1/4":""
        }} currentContent={currentContent} host={props.host} onVideoChanged={currentUpdater} />

        {currentContent[1] == "video" ? <>
          <TimeSelector onClick={e => setCurrentUpdater(t => setStartTime)} value={startTime} onChangeValue={setStartTime}></TimeSelector>
          <input value={topic} onChange={e => setTopic(e.target.value)} type="text" name="" id="" placeholder='Topic...' />
          <TimeSelector onClick={e => setCurrentUpdater(t => setEndTime)} value={endTime} onChangeValue={setEndTime}></TimeSelector>
          <input value={snippetTitle} onChange={e => setSnippetTitle(e.target.value)} type="text" name="" id="" placeholder='Snippet title...'

          />

          <div className="input-button" style={{

            cursor: (topic !== "" && snippetTitle !== "" && startTime !== endTime) ? "pointer" : "no-drop"
          }} onClick={async e => {
            if (topic !== "" && snippetTitle !== "" && startTime !== endTime) {
              await fetch(props.host + "/split/video", {
                method: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  filename: currentContent[0],
                  topic: topic,
                  title: snippetTitle,
                  startTime: startTime,
                  endTime: endTime
                })
              })
            }
          }}><FontAwesomeIcon icon={faFileUpload} /></div>

        </> : <></>}

      </div>
      <h1 >Selected Files:</h1>
      <FileTree host={props.host} setCurrentContent={setCurrentContent} media={props.user_media} />
    </main>

  )
}

export default ContentSelector

export async function getServerSideProps({ req, res }) {
  let documents, images, videos, username = "root", user_documents, user_images, user_videos
  try {
    documents = await fetch(process.env.VIDEO_SERVER_HOST + '/documents', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    documents = await documents.json()
    videos = await fetch(process.env.VIDEO_SERVER_HOST + '/videos', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    videos = await videos.json()
    images = await fetch(process.env.VIDEO_SERVER_HOST + '/images', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    images = await images.json()



  }
  catch (e) {
    documents = []
    images = []
    videos = []
  }
  try {
    username = req.cookies.username
    user_documents = await fetch(process.env.VIDEO_SERVER_HOST + '/documents', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    user_documents = await user_documents.json()
    user_videos = await fetch(process.env.VIDEO_SERVER_HOST + '/videos', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    user_videos = await user_videos.json()
    user_images = await fetch(process.env.VIDEO_SERVER_HOST + '/images', {
      method: "POST",
      headers: {
        "Accept": "application/json",
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        username: username
      })
    })
    user_images = await user_images.json()
  } catch (error) {
    console.log(error)
    user_documents = []
    user_images = []
    user_videos = []
  }
  console.log(user_videos)
  return {
    props: {
      host: process.env.VIDEO_SERVER_HOST,
      media: {
        "Documents": documents,
        "Images": images,
        "Videos": videos
      },
      user_media: {
        "Documents": user_documents,
        "Images": user_images,
        "Videos": user_videos
      }
    }
  }
}