import React, { useEffect, useLayoutEffect, useState } from 'react'
import Content from '../components/Content'
import FileTree from '../components/FileTree'
import TimeSelector from '../components/TimeSelector'

import Link from 'next/link'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowRotateLeft, faFileUpload } from '@fortawesome/free-solid-svg-icons'
import VideoSelector from '../components/VideoSelector'
import Head from 'next/head'
import { useCookies } from 'react-cookie'
import { useMedia } from '../lib/hooks'

const ContentSelector = (props) => {
  const [currentContent, setCurrentContent] = useState(["", "documents"])
  const [fileTypes, setFileTypes] = useState({ "ðŸŽ¥": ["video/*", "/video"], "ðŸ–¼": ["image/*", "/image"], "PDF": [".pdf", "/document"] })
  const [topic, setTopic] = useState("")
  const [snippetTitle, setSnippetTitle] = useState("")
  const [startTime, setStartTime] = useState("00:00:00")
  const [endTime, setEndTime] = useState("00:00:00")
  const [currentUpdater, setCurrentUpdater] = useState(t => setEndTime)
  const [cookies, setCookie, removeCookie] = useCookies(["username"]);
  var userMedia = useMedia(props.host, cookies.username)
  console.log(userMedia)
  return (
    <main className='selector'>
      <Head>
        <title>A Personal Selector</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />

      </Head>

      <div className='upload-menu'>
        <Link as="viewer" href="/"><div className='input-button link' ><FontAwesomeIcon icon={faArrowRotateLeft} /></div></Link>
        {Object.keys(fileTypes).map(s => <label className='input-button' key={s}><input type="file" onChange={async e => {
          let formData = new FormData()
          for (let i = 0; i < e.target.files.length; i++) {
            const f = e.target.files.item(i);
            formData.append(f.name, f)
          }
          await fetch(props.host + fileTypes[s][1], {
            method: "POST",
            body: formData
          })
        }} accept={fileTypes[s][0]} /><span>{s}</span></label>)}
        <div className="separator"></div>
        <VideoSelector host={props.host} />
      </div>


      <div>
        {userMedia.isLoading ? <h1>Loading root media...</h1> : userMedia.isError ? <h1>Error while loading root media...</h1> : <FileTree host={props.host} select={true} setCurrentContent={setCurrentContent} media={userMedia.media} onTriggerAddFileToPersonalList={
          (fileName, contentType, topic) => {
            const filename = (topic ? topic + "/" : "") + fileName
            const tmpMedia = {...userMedia.userMedia}
            if (typeof tmpMedia[contentType] == "object")
            tmpMedia[contentType] = Object.values(tmpMedia[contentType])
            if (!tmpMedia[contentType].includes(filename))
            tmpMedia[contentType] = [...tmpMedia[contentType], filename]
            else
            tmpMedia[contentType] = tmpMedia[contentType].filter(v => v != filename)

            fetch(props.host + "/videos/edit", {
              method: "POST",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                username: cookies.username,
                json: tmpMedia["Videos"]
              })
            })
            fetch(props.host + "/images/edit", {
              method: "POST",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                username: cookies.username,
                json: tmpMedia["Images"]
              })
            })
            fetch(props.host + "/documents/edit", {
              method: "POST",
              headers: {
                "Accept": "application/json",
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                username: cookies.username,
                json: tmpMedia["Documents"]
              })
            })
          }} />}
        <Content style={{
          gridColumn: "1/4",
          //gridRow:(currentContent[1] != "video")?"1/4":""
        }} currentContent={currentContent} host={props.host} onVideoChanged={currentUpdater} />

        {currentContent[1] == "video" ? <>
          <TimeSelector onClick={e => setCurrentUpdater(t => setStartTime)} value={startTime} onChangeValue={setStartTime}></TimeSelector>
          <input value={topic} onChange={e => setTopic(e.target.value)} type="text" name="" id="" placeholder='Topic...' />
          <TimeSelector onClick={e => setCurrentUpdater(t => setEndTime)} value={endTime} onChangeValue={setEndTime}></TimeSelector>
          <input value={snippetTitle} onChange={e => setSnippetTitle(e.target.value)} type="text" name="" id="" placeholder='Snippet title...'

          />

          <div className="input-button" style={{

            cursor: (topic !== "" && snippetTitle !== "" && startTime !== endTime) ? "pointer" : "no-drop"
          }} onClick={async e => {
            if (topic !== "" && snippetTitle !== "" && startTime !== endTime) {
              await fetch(props.host + "/split/video", {
                method: "POST",
                headers: {
                  "Accept": "application/json",
                  "Content-Type": "application/json"
                },
                body: JSON.stringify({
                  filename: currentContent[0],
                  topic: topic,
                  title: snippetTitle,
                  startTime: startTime,
                  endTime: endTime
                })
              })
            }
          }}><FontAwesomeIcon icon={faFileUpload} /></div>

        </> : <></>}

      </div>
      <h1 >Selected Files:</h1>
      {
        userMedia.isLoading ? <h1>Loading user media...</h1> : userMedia.isError ? <h1>Error while loading user media...</h1> :
          <FileTree host={props.host} setCurrentContent={setCurrentContent} media={userMedia.userMedia} />
      }
    </main>

  )
}

export default ContentSelector

export async function getStaticProps() {
  return {
    props: {
      host: process.env.VIDEO_SERVER_HOST
    }
  }
}